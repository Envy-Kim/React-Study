{"version":3,"file":"static/js/129.b71af4a8.chunk.js","mappings":"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","sources":["pages/practices/index.js","pages/practices/Count.js","pages/practices/Tree.js","context/ThemeContext.js","pages/practices/Theme.js","router/routes/practice.js","hooks/useSelectTyped.js","pages/todo/index.js","router/routes/todo.js","router/routes/index.js","router/index.js","App.js","hooks/useTheme.js"],"sourcesContent":["import React from 'react'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport {Container, ListGroup, ListGroupItem} from 'reactstrap'\r\n\r\nconst PracticeList = () => {\r\n  const navigate = useNavigate()\r\n\r\n  return (\r\n    <Container className={'my-3'}>\r\n      <ListGroup className=\"d-flex justify-content-between\">\r\n        <ListGroupItem onClick={() => navigate(`/practices/count`)}>\r\n          useState() 와 useEffect()\r\n        </ListGroupItem>\r\n        <ListGroupItem onClick={() => navigate(`/practices/tree`)}>\r\n          Component props\r\n        </ListGroupItem>\r\n        <ListGroupItem onClick={() => navigate(`/practices/theme`)}>\r\n          Custom Hook & 전역 상태 관리\r\n        </ListGroupItem>\r\n      </ListGroup>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default PracticeList\r\n","import {useEffect, useState} from 'react'\r\n\r\nconst CountPage = () => {\r\n  const [count, setCount] = useState(0)\r\n  const [logs, setLogs] = useState([])\r\n  const [sort, setSort] = useState('asc')\r\n\r\n  const handleAddCount = () => {\r\n    if (count >=0) {\r\n      setCount(count + 1)\r\n    }\r\n  }\r\n\r\n  const handleSubCount = () => {\r\n    if (count >0) {\r\n      setCount(count - 1)\r\n    }\r\n  }\r\n\r\n  const handleSort = value => {\r\n    if (sort !== value) {\r\n      setSort(value)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let logList = []\r\n\r\n    if (sort === 'asc') {\r\n      logList = logs.sort((a, b) => a.id - b.id)\r\n    } else {\r\n      logList = logs.sort((a, b) => b.id - a.id)\r\n    }\r\n    setLogs([...logList])\r\n\r\n  }, [logs, sort])\r\n\r\n  useEffect(() => {\r\n    if (!(count === 0 && logs && logs.length === 0)) {\r\n      if (sort === 'asc') {\r\n        setLogs([\r\n          ...logs,\r\n          {\r\n            id: logs.length + 1,\r\n            text: '값이 변경 되었습니다.',\r\n            count: count\r\n          }\r\n        ])\r\n      } else {\r\n        setLogs([\r\n          {\r\n            id: logs.length + 1,\r\n            text: '값이 변경 되었습니다.',\r\n            count: count\r\n          },\r\n          ...logs\r\n        ])\r\n      }\r\n    } else {\r\n      setLogs([\r\n        {\r\n          id: 1,\r\n          text: '초기값입니다.',\r\n          count: count\r\n        }\r\n      ])\r\n    }\r\n  }, [count, sort])\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>Count : {count}</h1>\r\n        <button type={'button'} onClick={handleAddCount}>증가</button>\r\n        <button type={'button'} onClick={handleSubCount}>감소</button>\r\n      </div>\r\n\r\n      <div>\r\n        <h1>History</h1>\r\n        <button type={'button'} onClick={() => handleSort('asc')}>시간순</button>\r\n        <button type={'button'} onClick={() => handleSort('desc')}>최신순</button>\r\n        <p> 정렬 상태 : {sort}</p>\r\n        <ul>\r\n          {logs.length > 0 && logs.map((log, index) => <li key={index}>{`${log.id} - ${log.text} :: ${log.count}`}</li>)}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CountPage","import React, {useState} from 'react'\r\nimport {Container} from 'reactstrap'\r\nimport styled, {css} from 'styled-components'\r\n\r\nconst Circle = styled.button`\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  background: ${props => props.inputColor || '#61dafb'};\r\n  \r\n  ${({active}) => active && \r\n  css`\r\n    background: #fa2968;\r\n  `}\r\n`\r\n\r\nconst CustomCircle = ({active, color, childCount, handleActive}) => {\r\n  const child = childCount ? childCount - 1 : 0\r\n  \r\n  return (\r\n    <>\r\n      <Circle inputColor={color} active={active} onClick={handleActive}/>\r\n      {(child > 0) && <CustomCircle color={color} active={active} childCount={child} handleActive={handleActive} />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst CircleWrap = ({childCount, color}) => {\r\n  const [active, setActive] = useState(false)\r\n\r\n  const handleActive = () => {\r\n    setActive(!active)\r\n  }\r\n\r\n  return (\r\n    <div className={'d-flex'}>\r\n      <CustomCircle childCount={childCount} active={active} color={color} handleActive={handleActive}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Tree = () => {\r\n  return (\r\n    <Container className={'my-3'}>\r\n      <h1>Practice Component Props</h1>\r\n\r\n      <div>\r\n        <CircleWrap childCount={4} />\r\n        <CircleWrap childCount={2} color={'#e2e834'} />\r\n        <CircleWrap childCount={3} color={'#56fa29'} />\r\n        <CircleWrap childCount={8} color={'#9d67f1'} />\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Tree","import { createContext } from 'react'\r\n\r\nexport const ThemeContext = createContext(null)","import './theme.scss'\r\nimport {Container, Form, FormGroup, Input, Label} from 'reactstrap'\r\nimport './theme.scss'\r\nimport {Moon, Sun} from 'react-feather'\r\nimport {useContext, useEffect, useState} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst Theme = () => {\r\n  const {theme, setTheme, isEffect, setIsEffect} = useContext(ThemeContext)\r\n  const [isDark, setIsDark] = useState(theme === 'dark')\r\n\r\n  useEffect(() => {\r\n    if (isDark) {\r\n      setTheme('dark')\r\n    } else {\r\n      setTheme('light')\r\n    }\r\n  }, [isDark, setTheme])\r\n\r\n  const renderThemeButton = (isDark) => {\r\n    return (\r\n      <div className={'me-3'}>\r\n        { !isDark ? <Moon onClick={() => setIsDark(true)} /> : <Sun onClick={() => setIsDark(false)} /> }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`${theme} vh-100`}>\r\n      <div className={'navbar'}>\r\n        <div className={'ms-3'}>\r\n          <h2>Theme</h2>\r\n        </div>\r\n        <div className={'d-flex'}>\r\n          <Form className={'me-3'}>\r\n            <FormGroup switch>\r\n              <Label check className={'fs-5'}>이펙트</Label>\r\n              <Input type=\"switch\" role=\"switch\" checked={isEffect} onChange={e => setIsEffect(e.target.checked)}/>\r\n            </FormGroup>\r\n          </Form>\r\n          {renderThemeButton(isDark)}\r\n        </div>\r\n      </div>\r\n      <Container>\r\n        <h1>Theme Test</h1>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Theme","import PracticeList from '../../pages/practices/index'\r\nimport CountPage from '../../pages/practices/Count'\r\nimport Tree from '../../pages/practices/Tree'\r\nimport Theme from '../../pages/practices/Theme'\r\n\r\nconst PracticeRoutes = [\r\n  {\r\n    path: '/practices',\r\n    element: <PracticeList />\r\n  },\r\n  {\r\n    path: '/practices/count',\r\n    element: <CountPage />\r\n  },\r\n  {\r\n    path: '/practices/tree',\r\n    element: <Tree />\r\n  },\r\n  {\r\n    path: '/practices/theme',\r\n    element: <Theme />\r\n  }\r\n]\r\n\r\nexport default PracticeRoutes","import { useSelector, shallowEqual } from 'react-redux'\r\n\r\n/**\r\n * selector 안티패턴을 피하기 위한 커스텀 훅\r\n * \r\n * @param selector\r\n * @param equalityFn\r\n * @returns {any}\r\n */\r\nexport default function useSelectorTyped(selector, equalityFn = shallowEqual) {\r\n  return useSelector(selector, equalityFn)\r\n}\r\n","import React, {lazy, useEffect, useState} from 'react'\r\nimport {Button, Col, Container, Input, InputGroup, Nav, NavItem, NavLink, Row} from 'reactstrap'\r\nimport {useDispatch} from 'react-redux'\r\nimport useSelectorTyped from '../../hooks/useSelectTyped'\r\nimport moment from 'moment'\r\nimport {handleAddTodo, handleRemoveAll, handleSetOrderBy} from './store'\r\nimport classnames from 'classnames'\r\nimport Select from 'react-select'\r\n\r\nconst TodoList = lazy(() => import('./Table'))\r\n\r\nconst Todo = () => {\r\n  const dispatch = useDispatch()\r\n  const list = useSelectorTyped(state => state.todoManage.list)\r\n  const orderBy = useSelectorTyped(state => state.todoManage.orderBy)\r\n\r\n  const [inputText, setInputText] = useState('')\r\n  const [filter, setFilter] = useState('')\r\n  const [showList, setShowList] = useState([])\r\n\r\n  const sortOptions = [\r\n    {\r\n      label: '등록순',\r\n      value: 'asc'\r\n    },\r\n    {\r\n      label: '최신순',\r\n      value: 'desc'\r\n    },\r\n    {\r\n      label: '가나다순',\r\n      value: 'abc'\r\n    }\r\n  ]\r\n\r\n  const handleAdd = () => {\r\n    dispatch(handleAddTodo({\r\n      id: list.length + 1,\r\n      text: inputText,\r\n      is_completed: false,\r\n      created_at: moment().format('YYYY-MM-DD HH:mm:ss')\r\n    }))\r\n\r\n    setInputText('')\r\n  }\r\n\r\n  const handleInputKeyDown = e => {\r\n    if (e.keyCode === 13) {\r\n      handleAdd()\r\n    }\r\n  }\r\n\r\n  const handleClearAll = () => {\r\n    if (window.confirm('정말 모두 삭제하겠습니까 ?')) {\r\n      dispatch(handleRemoveAll())\r\n    }\r\n  }\r\n\r\n  const handleSort = sort => {\r\n    dispatch(handleSetOrderBy(sort))\r\n  }\r\n\r\n  useEffect(() => {\r\n    let tempList = []\r\n\r\n    if (list) {\r\n      tempList = list\r\n\r\n      if (filter === 'active') {\r\n        tempList = list.filter(item => item.is_completed === false)\r\n      } else if (filter === 'completed') {\r\n        tempList = list.filter(item => item.is_completed === true)\r\n      }\r\n    }\r\n\r\n    setShowList(tempList)\r\n  }, [list, filter])\r\n\r\n  return (\r\n    <Container className={'my-3'}>\r\n      <h1>Todo List</h1>\r\n\r\n      <InputGroup className={'my-5'}>\r\n        <Input type={'text'} value={inputText} onKeyDown={handleInputKeyDown} onChange={e => setInputText(e.target.value)}/>\r\n        <Button type={'button'} onClick={() => handleAdd()}>등록</Button>\r\n      </InputGroup>\r\n\r\n      <Row className={'mb-3'}>\r\n        <Col>\r\n          <span>Total : {showList.length}</span>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Col lg={9}>\r\n          <Nav tabs>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({active: !filter})}\r\n                onClick={() => setFilter('')}>All</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({active: filter === 'active'})}\r\n                onClick={() => setFilter('active')}>Active</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({active: filter === 'completed'})}\r\n                onClick={() => setFilter('completed')}>Completed</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Col>\r\n        <Col lg={3} className={'d-flex justify-content-end'}>\r\n          <Select\r\n            size='lg'\r\n            placeholder=\"등록순\"\r\n            className={'me-3'}\r\n            classNamePrefix='select'\r\n            onChange={data => handleSort(data.value)}\r\n            value={sortOptions.find(item => item.value === orderBy)}\r\n            options={sortOptions} />\r\n          <Button type={'button'} size={'sm'} onClick={handleClearAll}>전체 삭제</Button>\r\n        </Col>\r\n      </Row>\r\n\r\n      <TodoList list={showList} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import Todo from '../../pages/todo/index'\r\n\r\nconst TodoRoutes = [\r\n  {\r\n    path: '/todo',\r\n    element: <Todo />\r\n  }\r\n]\r\n\r\nexport default TodoRoutes","import PracticeRoutes from './practice'\r\nimport TodoRoutes from './todo'\r\n\r\nconst routes = [\r\n  ...PracticeRoutes,\r\n  ...TodoRoutes\r\n]\r\n\r\nconst getRoutes = () => {\r\n  return routes\r\n}\r\n\r\nexport {routes, getRoutes}","import {lazy} from 'react'\r\nimport {useRoutes} from 'react-router-dom'\r\nimport {getRoutes} from './routes'\r\n\r\nconst Dashboard = lazy(() => import('../pages/dashboard'))\r\nconst Router = () => {\r\n  const allRoutes = getRoutes()\r\n\r\n  const routes = useRoutes([\r\n    {\r\n      path: '/',\r\n      index: true,\r\n      element: <Dashboard />\r\n    },\r\n    ...allRoutes\r\n  ])\r\n\r\n  return routes\r\n}\r\n\r\nexport default Router","import './App.css'\r\nimport {Suspense} from 'react'\r\nimport Router from './router'\r\nimport {ThemeContext} from './context/ThemeContext'\r\nimport './pages/practices/theme.scss'\r\nimport {useTheme} from './hooks/useTheme'\r\n\r\nconst App = () => {\r\n  const {theme, setTheme, isEffect, setIsEffect} = useTheme()\r\n\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <ThemeContext.Provider value={{theme, setTheme, isEffect, setIsEffect}}>\r\n        <Router />\r\n      </ThemeContext.Provider>\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import useSelectorTyped from './useSelectTyped'\r\nimport {useDispatch} from 'react-redux'\r\nimport {handleEffect, handleTheme} from '../redux/layout'\r\nimport {useCallback, useEffect} from 'react'\r\n\r\nexport const useTheme = (callback, deps) => {\r\n  const dispatch = useDispatch()\r\n  const theme = useSelectorTyped(store => store.layout.theme)\r\n  const isEffect = useSelectorTyped(store => store.layout.isEffect)\r\n\r\n  const setTheme = type => {\r\n    dispatch(handleTheme(type))\r\n  }\r\n\r\n  const setIsEffect = data => {\r\n    dispatch(handleEffect(data))\r\n  }\r\n\r\n  const body = window.document.body\r\n  const MIN_DURATION = 10\r\n\r\n  const makeSnowflake = useCallback(async () => {\r\n    const effect = document.createElement('div')\r\n    const left = Math.random() * window.screen.width\r\n    const delay = Math.random() * 10\r\n    const initialOpacity = Math.random()\r\n    const duration = Math.random() * 20 + MIN_DURATION\r\n\r\n    effect.style.left = `${left}px`\r\n    effect.style.animationDelay = `${delay}s`\r\n    effect.style.opacity = `${initialOpacity}`\r\n\r\n    if (theme !== 'dark') {\r\n      effect.classList.add('cherry-blossom')\r\n      effect.style.animation = `cherry-blossom-fall ${duration}s linear`\r\n    } else {\r\n      effect.classList.add('snowflake')\r\n      effect.style.animation = `snow-fall ${duration}s linear`\r\n    }\r\n\r\n    body.appendChild(effect)\r\n\r\n    setTimeout(() => {\r\n      body.removeChild(effect)\r\n    }, (duration + delay) * 1000)\r\n  }, [body, theme, MIN_DURATION])\r\n\r\n  useEffect(() => {\r\n    let timer = null\r\n\r\n    if (isEffect) {\r\n      timer = setInterval(() => {\r\n        makeSnowflake()\r\n      }, 500)\r\n    } else {\r\n      clearInterval(timer)\r\n\r\n      let effects = null\r\n      if (theme === 'dark') {\r\n        effects = document.querySelectorAll('.snowflake')\r\n      } else {\r\n        effects = document.querySelectorAll('.cherry-blossom')\r\n      }\r\n      for (let i = 0; i < effects.length; i++) {\r\n        effects[i].remove()\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [isEffect, theme, makeSnowflake])\r\n\r\n  return {theme, setTheme, isEffect, setIsEffect}\r\n}"],"names":["navigate","useNavigate","className","onClick","useState","count","setCount","logs","setLogs","sort","setSort","handleSort","value","useEffect","logList","a","b","id","length","text","type","map","log","index","Circle","styled","props","inputColor","active","css","CustomCircle","color","childCount","handleActive","child","CircleWrap","setActive","ThemeContext","createContext","useContext","theme","setTheme","isEffect","setIsEffect","isDark","setIsDark","switch","check","role","checked","onChange","e","target","renderThemeButton","path","element","Count","useSelectorTyped","selector","equalityFn","shallowEqual","useSelector","TodoList","lazy","dispatch","useDispatch","list","state","todoManage","orderBy","inputText","setInputText","filter","setFilter","showList","setShowList","sortOptions","label","handleAdd","handleAddTodo","is_completed","created_at","moment","format","tempList","item","onKeyDown","keyCode","lg","tabs","classnames","size","placeholder","classNamePrefix","data","handleSetOrderBy","find","options","window","confirm","handleRemoveAll","routes","PracticeRoutes","TodoRoutes","getRoutes","Dashboard","allRoutes","useRoutes","callback","deps","store","layout","body","document","makeSnowflake","useCallback","effect","createElement","left","Math","random","screen","width","delay","initialOpacity","duration","style","animationDelay","opacity","classList","add","animation","appendChild","setTimeout","removeChild","timer","setInterval","clearInterval","effects","querySelectorAll","i","remove","handleTheme","handleEffect","useTheme","Suspense","fallback","Provider"],"sourceRoot":""}